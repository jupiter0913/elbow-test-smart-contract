{
  "address": "0x463d55d6416a7CCa1f7C005a6AC8f0dD70a6f410",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "contributionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raiseAmount",
          "type": "uint256"
        }
      ],
      "name": "createContribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "raiseTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "raisePrice",
          "type": "uint256"
        }
      ],
      "name": "createProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getContribution",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "raiseAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "contributer",
              "type": "address"
            }
          ],
          "internalType": "struct Crowdfund.Contribution",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getProject",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "raiseToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "raisePrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct Crowdfund.Project",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "getRaisedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getRelease",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releaseAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "releaseAddress",
              "type": "address"
            }
          ],
          "internalType": "struct Crowdfund.Release",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "getReleasedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releaseCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "releaseAddress",
          "type": "address"
        }
      ],
      "name": "releaseFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x921950e9126d31de52b086911467313f9659f54278afed5cd1c9d914c9fe7ec8",
  "receipt": {
    "to": null,
    "from": "0x3A54802752fEFDc1aF2CD0b6DFA4F24694bDEE33",
    "contractAddress": "0x463d55d6416a7CCa1f7C005a6AC8f0dD70a6f410",
    "transactionIndex": 28,
    "gasUsed": "1044895",
    "logsBloom": "0x
    "blockHash": "0x6258dd26670b9c0f1d0ee1906f3c4afdac13288adbdd6557e685b0e7d6ba9401",
    "transactionHash": "0x921950e9126d31de52b086911467313f9659f54278afed5cd1c9d914c9fe7ec8",
    "logs": [
      {
        "transactionIndex": 28,
        "blockNumber": 7903936,
        "transactionHash": "0x921950e9126d31de52b086911467313f9659f54278afed5cd1c9d914c9fe7ec8",
        "address": "0x463d55d6416a7CCa1f7C005a6AC8f0dD70a6f410",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003a54802752fefdc1af2cd0b6dfa4f24694bdee33"
        ],
        "data": "0x",
        "logIndex": 63,
        "blockHash": "0x6258dd26670b9c0f1d0ee1906f3c4afdac13288adbdd6557e685b0e7d6ba9401"
      }
    ],
    "blockNumber": 7903936,
    "cumulativeGasUsed": "19376867",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bc0c6cce3b534df909d3b53f558e0e0a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"contributionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raiseAmount\",\"type\":\"uint256\"}],\"name\":\"createContribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"raiseTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"raisePrice\",\"type\":\"uint256\"}],\"name\":\"createProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getContribution\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raiseAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contributer\",\"type\":\"address\"}],\"internalType\":\"struct Crowdfund.Contribution\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getProject\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"raiseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"raisePrice\",\"type\":\"uint256\"}],\"internalType\":\"struct Crowdfund.Project\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"getRaisedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRelease\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"releaseAddress\",\"type\":\"address\"}],\"internalType\":\"struct Crowdfund.Release\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"getReleasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"releaseAddress\",\"type\":\"address\"}],\"name\":\"releaseFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Crowdfund.sol\":\"Crowdfund\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Crowdfund.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract Crowdfund is ReentrancyGuard, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    struct Project {\\n        uint id;\\n        address owner;\\n        string name;\\n        string description;\\n        address raiseToken;\\n        uint raisePrice;\\n    }\\n\\n    struct Contribution {\\n        uint id;\\n        uint projectId;\\n        uint raiseAmount;\\n        address contributer;\\n    }\\n\\n    struct Release {\\n        uint id;\\n        uint projectId;\\n        uint releaseAmount;\\n        address releaseAddress;\\n    }\\n\\n    uint public projectCount;\\n    uint public contributionCount;\\n    uint public releaseCount;\\n\\n    mapping(uint => Project) private projects;\\n    mapping(uint => Contribution) private contribution;\\n    mapping(uint => Release) private releases;\\n    mapping(uint => uint) private totalRaised;\\n    mapping(uint => uint) private totalReleased;\\n\\n    constructor() {}\\n\\n    function createProject(string memory name, string memory description, address raiseTokenAddress, uint raisePrice) public {\\n        require(raiseTokenAddress != address(0), \\\"Error: Rase token shouldn't be null\\\");\\n\\n        projectCount ++;\\n        projects[projectCount] = Project(projectCount, msg.sender, name, description, raiseTokenAddress, raisePrice);\\n    }\\n\\n    function createContribution(uint projectId, uint raiseAmount) public {\\n        require(projects[projectId].id != 0, \\\"Error: Project does not exist\\\");\\n\\n        IERC20(projects[projectId].raiseToken).safeTransferFrom(address(msg.sender), address(this), raiseAmount);\\n\\n        contributionCount ++;\\n        contribution[contributionCount] = Contribution(contributionCount, projectId, raiseAmount, msg.sender);\\n\\n        totalRaised[projectId] += raiseAmount;\\n    }\\n\\n    function releaseFund(uint projectId, uint releaseAmount, address releaseAddress) public {\\n        IERC20(projects[projectId].raiseToken).safeTransfer(releaseAddress, releaseAmount);\\n\\n        releaseCount ++;\\n        releases[releaseCount] = Release(releaseCount, projectId, releaseAmount, releaseAddress);\\n\\n        totalReleased[projectId] += releaseAmount;\\n    }\\n\\n    function getProject(uint id) public view returns (Project memory) {\\n        return projects[id];\\n    }\\n\\n    function getContribution(uint id) public view returns (Contribution memory) {\\n        return contribution[id];\\n    }\\n    \\n    function getRelease(uint id) public view returns (Release memory) {\\n        return releases[id];\\n    }\\n\\n    function getRaisedAmount(uint projectId) public view returns (uint) {\\n        return totalRaised[projectId];\\n    }\\n\\n    function getReleasedAmount(uint projectId) public view returns (uint) {\\n        return totalReleased[projectId];\\n    }\\n\\n}\\n\",\"keccak256\":\"0x406554905544a464d590384a6709eff25367224b1986bd6f42d2f997b0d44975\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600160005561001f33610024565b610076565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61111a806100856000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063b8d08db21161008c578063eb5cea2311610066578063eb5cea23146101dd578063ecab443f146101fd578063f0f3f2c81461021d578063f2fde38b1461023d57600080fd5b8063b8d08db2146101ae578063bac38339146101b7578063cef42254146101ca57600080fd5b8063715018a6116100c8578063715018a61461012957806377ea47d01461013157806379af2b9a146101445780638da5cb5b1461019357600080fd5b806336fbad26146100ef57806342de9b2a1461010b5780635b18056b14610120575b600080fd5b6100f860025481565b6040519081526020015b60405180910390f35b61011e610119366004610db8565b610250565b005b6100f860035481565b61011e61031c565b61011e61013f366004610ded565b610330565b610157610152366004610e0f565b610456565b60405161010291908151815260208083015190820152604080830151908201526060918201516001600160a01b03169181019190915260800190565b6001546040516001600160a01b039091168152602001610102565b6100f860045481565b61011e6101c5366004610ecb565b6104d8565b6101576101d8366004610e0f565b610626565b6100f86101eb366004610e0f565b60009081526008602052604090205490565b6100f861020b366004610e0f565b60009081526009602052604090205490565b61023061022b366004610e0f565b6106a8565b6040516101029190610f9f565b61011e61024b36600461101d565b610875565b600083815260056020526040902060040154610276906001600160a01b03168284610905565b600480549060006102868361104e565b90915550506040805160808101825260045480825260208083018781528385018781526001600160a01b03878116606087019081526000958652600785528786209651875592516001870155905160028601559051600390940180546001600160a01b031916949091169390931790925585815260099091529081208054849290610312908490611069565b9091555050505050565b61032461099a565b61032e60006109f4565b565b6000828152600560205260409020546103905760405162461bcd60e51b815260206004820152601d60248201527f4572726f723a2050726f6a65637420646f6573206e6f7420657869737400000060448201526064015b60405180910390fd5b6000828152600560205260409020600401546103b7906001600160a01b0316333084610a46565b600380549060006103c78361104e565b90915550506040805160808101825260038054808352602080840187815284860187815233606087019081526000948552600684528785209651875591516001870155516002860155519390920180546001600160a01b0319166001600160a01b039094169390931790925584825260089052908120805483929061044d908490611069565b90915550505050565b61048a604051806080016040528060008152602001600081526020016000815260200160006001600160a01b031681525090565b506000908152600760209081526040918290208251608081018452815481526001820154928101929092526002810154928201929092526003909101546001600160a01b0316606082015290565b6001600160a01b03821661053a5760405162461bcd60e51b815260206004820152602360248201527f4572726f723a205261736520746f6b656e2073686f756c646e2774206265206e6044820152621d5b1b60ea1b6064820152608401610387565b6002805490600061054a8361104e565b90915550506040805160c081018252600280548083523360208085019182528486018a8152606086018a90526001600160a01b03898116608088015260a08701899052600094855260058352969093208551815591516001830180546001600160a01b031916919097161790955590518051939491936105d1938501929190910190610d03565b50606082015180516105ed916003840191602090910190610d03565b5060808201516004820180546001600160a01b0319166001600160a01b0390921691909117905560a09091015160059091015550505050565b61065a604051806080016040528060008152602001600081526020016000815260200160006001600160a01b031681525090565b506000908152600660209081526040918290208251608081018452815481526001820154928101929092526002810154928201929092526003909101546001600160a01b0316606082015290565b6106f36040518060c001604052806000815260200160006001600160a01b03168152602001606081526020016060815260200160006001600160a01b03168152602001600081525090565b600082815260056020908152604091829020825160c0810184528154815260018201546001600160a01b031692810192909252600281018054929391929184019161073d90611081565b80601f016020809104026020016040519081016040528092919081815260200182805461076990611081565b80156107b65780601f1061078b576101008083540402835291602001916107b6565b820191906000526020600020905b81548152906001019060200180831161079957829003601f168201915b505050505081526020016003820180546107cf90611081565b80601f01602080910402602001604051908101604052809291908181526020018280546107fb90611081565b80156108485780601f1061081d57610100808354040283529160200191610848565b820191906000526020600020905b81548152906001019060200180831161082b57829003601f168201915b505050918352505060048201546001600160a01b0316602082015260059091015460409091015292915050565b61087d61099a565b6001600160a01b0381166108f95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610387565b610902816109f4565b50565b6040516001600160a01b03831660248201526044810182905261099590849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610a84565b505050565b6001546001600160a01b0316331461032e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610387565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052610a7e9085906323b872dd60e01b90608401610931565b50505050565b6000610ad9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610b699092919063ffffffff16565b8051909150156109955780806020019051810190610af791906110bc565b6109955760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610387565b6060610b788484600085610b82565b90505b9392505050565b606082471015610bfa5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610387565b6001600160a01b0385163b610c515760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610387565b600080866001600160a01b03168587604051610c6d91906110de565b60006040518083038185875af1925050503d8060008114610caa576040519150601f19603f3d011682016040523d82523d6000602084013e610caf565b606091505b5091509150610cbf828286610cca565b979650505050505050565b60608315610cd9575081610b7b565b825115610ce95782518084602001fd5b8160405162461bcd60e51b815260040161038791906110fa565b828054610d0f90611081565b90600052602060002090601f016020900481019282610d315760008555610d77565b82601f10610d4a57805160ff1916838001178555610d77565b82800160010185558215610d77579182015b82811115610d77578251825591602001919060010190610d5c565b50610d83929150610d87565b5090565b5b80821115610d835760008155600101610d88565b80356001600160a01b0381168114610db357600080fd5b919050565b600080600060608486031215610dcd57600080fd5b8335925060208401359150610de460408501610d9c565b90509250925092565b60008060408385031215610e0057600080fd5b50508035926020909101359150565b600060208284031215610e2157600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610e4f57600080fd5b813567ffffffffffffffff80821115610e6a57610e6a610e28565b604051601f8301601f19908116603f01168101908282118183101715610e9257610e92610e28565b81604052838152866020858801011115610eab57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060808587031215610ee157600080fd5b843567ffffffffffffffff80821115610ef957600080fd5b610f0588838901610e3e565b95506020870135915080821115610f1b57600080fd5b50610f2887828801610e3e565b935050610f3760408601610d9c565b9396929550929360600135925050565b60005b83811015610f62578181015183820152602001610f4a565b83811115610a7e5750506000910152565b60008151808452610f8b816020860160208601610f47565b601f01601f19169290920160200192915050565b6020815281516020820152600060208301516001600160a01b0380821660408501526040850151915060c06060850152610fdc60e0850183610f73565b91506060850151601f19858403016080860152610ff98382610f73565b9250508060808601511660a08501525060a084015160c08401528091505092915050565b60006020828403121561102f57600080fd5b610b7b82610d9c565b634e487b7160e01b600052601160045260246000fd5b600060001982141561106257611062611038565b5060010190565b6000821982111561107c5761107c611038565b500190565b600181811c9082168061109557607f821691505b602082108114156110b657634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156110ce57600080fd5b81518015158114610b7b57600080fd5b600082516110f0818460208701610f47565b9190910192915050565b602081526000610b7b6020830184610f7356fea164736f6c634300080a000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063b8d08db21161008c578063eb5cea2311610066578063eb5cea23146101dd578063ecab443f146101fd578063f0f3f2c81461021d578063f2fde38b1461023d57600080fd5b8063b8d08db2146101ae578063bac38339146101b7578063cef42254146101ca57600080fd5b8063715018a6116100c8578063715018a61461012957806377ea47d01461013157806379af2b9a146101445780638da5cb5b1461019357600080fd5b806336fbad26146100ef57806342de9b2a1461010b5780635b18056b14610120575b600080fd5b6100f860025481565b6040519081526020015b60405180910390f35b61011e610119366004610db8565b610250565b005b6100f860035481565b61011e61031c565b61011e61013f366004610ded565b610330565b610157610152366004610e0f565b610456565b60405161010291908151815260208083015190820152604080830151908201526060918201516001600160a01b03169181019190915260800190565b6001546040516001600160a01b039091168152602001610102565b6100f860045481565b61011e6101c5366004610ecb565b6104d8565b6101576101d8366004610e0f565b610626565b6100f86101eb366004610e0f565b60009081526008602052604090205490565b6100f861020b366004610e0f565b60009081526009602052604090205490565b61023061022b366004610e0f565b6106a8565b6040516101029190610f9f565b61011e61024b36600461101d565b610875565b600083815260056020526040902060040154610276906001600160a01b03168284610905565b600480549060006102868361104e565b90915550506040805160808101825260045480825260208083018781528385018781526001600160a01b03878116606087019081526000958652600785528786209651875592516001870155905160028601559051600390940180546001600160a01b031916949091169390931790925585815260099091529081208054849290610312908490611069565b9091555050505050565b61032461099a565b61032e60006109f4565b565b6000828152600560205260409020546103905760405162461bcd60e51b815260206004820152601d60248201527f4572726f723a2050726f6a65637420646f6573206e6f7420657869737400000060448201526064015b60405180910390fd5b6000828152600560205260409020600401546103b7906001600160a01b0316333084610a46565b600380549060006103c78361104e565b90915550506040805160808101825260038054808352602080840187815284860187815233606087019081526000948552600684528785209651875591516001870155516002860155519390920180546001600160a01b0319166001600160a01b039094169390931790925584825260089052908120805483929061044d908490611069565b90915550505050565b61048a604051806080016040528060008152602001600081526020016000815260200160006001600160a01b031681525090565b506000908152600760209081526040918290208251608081018452815481526001820154928101929092526002810154928201929092526003909101546001600160a01b0316606082015290565b6001600160a01b03821661053a5760405162461bcd60e51b815260206004820152602360248201527f4572726f723a205261736520746f6b656e2073686f756c646e2774206265206e6044820152621d5b1b60ea1b6064820152608401610387565b6002805490600061054a8361104e565b90915550506040805160c081018252600280548083523360208085019182528486018a8152606086018a90526001600160a01b03898116608088015260a08701899052600094855260058352969093208551815591516001830180546001600160a01b031916919097161790955590518051939491936105d1938501929190910190610d03565b50606082015180516105ed916003840191602090910190610d03565b5060808201516004820180546001600160a01b0319166001600160a01b0390921691909117905560a09091015160059091015550505050565b61065a604051806080016040528060008152602001600081526020016000815260200160006001600160a01b031681525090565b506000908152600660209081526040918290208251608081018452815481526001820154928101929092526002810154928201929092526003909101546001600160a01b0316606082015290565b6106f36040518060c001604052806000815260200160006001600160a01b03168152602001606081526020016060815260200160006001600160a01b03168152602001600081525090565b600082815260056020908152604091829020825160c0810184528154815260018201546001600160a01b031692810192909252600281018054929391929184019161073d90611081565b80601f016020809104026020016040519081016040528092919081815260200182805461076990611081565b80156107b65780601f1061078b576101008083540402835291602001916107b6565b820191906000526020600020905b81548152906001019060200180831161079957829003601f168201915b505050505081526020016003820180546107cf90611081565b80601f01602080910402602001604051908101604052809291908181526020018280546107fb90611081565b80156108485780601f1061081d57610100808354040283529160200191610848565b820191906000526020600020905b81548152906001019060200180831161082b57829003601f168201915b505050918352505060048201546001600160a01b0316602082015260059091015460409091015292915050565b61087d61099a565b6001600160a01b0381166108f95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610387565b610902816109f4565b50565b6040516001600160a01b03831660248201526044810182905261099590849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610a84565b505050565b6001546001600160a01b0316331461032e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610387565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052610a7e9085906323b872dd60e01b90608401610931565b50505050565b6000610ad9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610b699092919063ffffffff16565b8051909150156109955780806020019051810190610af791906110bc565b6109955760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610387565b6060610b788484600085610b82565b90505b9392505050565b606082471015610bfa5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610387565b6001600160a01b0385163b610c515760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610387565b600080866001600160a01b03168587604051610c6d91906110de565b60006040518083038185875af1925050503d8060008114610caa576040519150601f19603f3d011682016040523d82523d6000602084013e610caf565b606091505b5091509150610cbf828286610cca565b979650505050505050565b60608315610cd9575081610b7b565b825115610ce95782518084602001fd5b8160405162461bcd60e51b815260040161038791906110fa565b828054610d0f90611081565b90600052602060002090601f016020900481019282610d315760008555610d77565b82601f10610d4a57805160ff1916838001178555610d77565b82800160010185558215610d77579182015b82811115610d77578251825591602001919060010190610d5c565b50610d83929150610d87565b5090565b5b80821115610d835760008155600101610d88565b80356001600160a01b0381168114610db357600080fd5b919050565b600080600060608486031215610dcd57600080fd5b8335925060208401359150610de460408501610d9c565b90509250925092565b60008060408385031215610e0057600080fd5b50508035926020909101359150565b600060208284031215610e2157600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610e4f57600080fd5b813567ffffffffffffffff80821115610e6a57610e6a610e28565b604051601f8301601f19908116603f01168101908282118183101715610e9257610e92610e28565b81604052838152866020858801011115610eab57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060808587031215610ee157600080fd5b843567ffffffffffffffff80821115610ef957600080fd5b610f0588838901610e3e565b95506020870135915080821115610f1b57600080fd5b50610f2887828801610e3e565b935050610f3760408601610d9c565b9396929550929360600135925050565b60005b83811015610f62578181015183820152602001610f4a565b83811115610a7e5750506000910152565b60008151808452610f8b816020860160208601610f47565b601f01601f19169290920160200192915050565b6020815281516020820152600060208301516001600160a01b0380821660408501526040850151915060c06060850152610fdc60e0850183610f73565b91506060850151601f19858403016080860152610ff98382610f73565b9250508060808601511660a08501525060a084015160c08401528091505092915050565b60006020828403121561102f57600080fd5b610b7b82610d9c565b634e487b7160e01b600052601160045260246000fd5b600060001982141561106257611062611038565b5060010190565b6000821982111561107c5761107c611038565b500190565b600181811c9082168061109557607f821691505b602082108114156110b657634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156110ce57600080fd5b81518015158114610b7b57600080fd5b600082516110f0818460208701610f47565b9190910192915050565b602081526000610b7b6020830184610f7356fea164736f6c634300080a000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 123,
        "contract": "contracts/Crowdfund.sol:Crowdfund",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/Crowdfund.sol:Crowdfund",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 911,
        "contract": "contracts/Crowdfund.sol:Crowdfund",
        "label": "projectCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 913,
        "contract": "contracts/Crowdfund.sol:Crowdfund",
        "label": "contributionCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 915,
        "contract": "contracts/Crowdfund.sol:Crowdfund",
        "label": "releaseCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 920,
        "contract": "contracts/Crowdfund.sol:Crowdfund",
        "label": "projects",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Project)891_storage)"
      },
      {
        "astId": 925,
        "contract": "contracts/Crowdfund.sol:Crowdfund",
        "label": "contribution",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Contribution)900_storage)"
      },
      {
        "astId": 930,
        "contract": "contracts/Crowdfund.sol:Crowdfund",
        "label": "releases",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Release)909_storage)"
      },
      {
        "astId": 934,
        "contract": "contracts/Crowdfund.sol:Crowdfund",
        "label": "totalRaised",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 938,
        "contract": "contracts/Crowdfund.sol:Crowdfund",
        "label": "totalReleased",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Contribution)900_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Crowdfund.Contribution)",
        "numberOfBytes": "32",
        "value": "t_struct(Contribution)900_storage"
      },
      "t_mapping(t_uint256,t_struct(Project)891_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Crowdfund.Project)",
        "numberOfBytes": "32",
        "value": "t_struct(Project)891_storage"
      },
      "t_mapping(t_uint256,t_struct(Release)909_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Crowdfund.Release)",
        "numberOfBytes": "32",
        "value": "t_struct(Release)909_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Contribution)900_storage": {
        "encoding": "inplace",
        "label": "struct Crowdfund.Contribution",
        "members": [
          {
            "astId": 893,
            "contract": "contracts/Crowdfund.sol:Crowdfund",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 895,
            "contract": "contracts/Crowdfund.sol:Crowdfund",
            "label": "projectId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 897,
            "contract": "contracts/Crowdfund.sol:Crowdfund",
            "label": "raiseAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 899,
            "contract": "contracts/Crowdfund.sol:Crowdfund",
            "label": "contributer",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Project)891_storage": {
        "encoding": "inplace",
        "label": "struct Crowdfund.Project",
        "members": [
          {
            "astId": 880,
            "contract": "contracts/Crowdfund.sol:Crowdfund",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 882,
            "contract": "contracts/Crowdfund.sol:Crowdfund",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 884,
            "contract": "contracts/Crowdfund.sol:Crowdfund",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 886,
            "contract": "contracts/Crowdfund.sol:Crowdfund",
            "label": "description",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 888,
            "contract": "contracts/Crowdfund.sol:Crowdfund",
            "label": "raiseToken",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 890,
            "contract": "contracts/Crowdfund.sol:Crowdfund",
            "label": "raisePrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Release)909_storage": {
        "encoding": "inplace",
        "label": "struct Crowdfund.Release",
        "members": [
          {
            "astId": 902,
            "contract": "contracts/Crowdfund.sol:Crowdfund",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 904,
            "contract": "contracts/Crowdfund.sol:Crowdfund",
            "label": "projectId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 906,
            "contract": "contracts/Crowdfund.sol:Crowdfund",
            "label": "releaseAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 908,
            "contract": "contracts/Crowdfund.sol:Crowdfund",
            "label": "releaseAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}